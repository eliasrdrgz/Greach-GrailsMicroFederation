Please read these instructions before starting the lab work in the Greach workshop.

Requirements:

You will need JDK 8 and Git for this workshop.

Notes:

This workshop project is structured as a multi-module project, with each module representing an individual microservice in the federation.

Two of the services are implemented in Grails 3.x. Three of the services are simple Spring Cloud services providing cross-cutting support
services to the federation. A "real" application would include many more business services, redundant discovery services, etc., but
this small federation is a foundation you can use to start building your own microservice federation.

The master branch represents the working solution. The workshop branch is the branch you will do your lab work work against. The directions
will specify the particular project and artifact to modify. If you get stuck, just compare the artifact being modified in the workshop
branch with the one in master.

In addition, if you get stuck and fall behind, the solution for each completed lab after Lab 3 will be in its own branch;
i.e. workshop_lab4_solution. You can just checkout that lab and start from there.

To summarize, the branches in graphic form look like this:

master
  |
  |- workshop
        |
        |- workshop_lab4_solution
                     |
                     |- workshop_lab5_solution
                                  |
                                  |- workshop_lab6_solution

To begin, checkout the Workshop branch.

IMPORTANT: Whenever you change branches, do a "gradle clean" then a "gradle build" to ensure you're starting from a known good set of
           compiled classes.

Workshop Labs

Lab 1: Review ProductCatalog

	A. Unless you're planning on selling Cat or Star Trek calendars, I don't think the domain specifics of the Product Catalog
	will be all that exciting. We're modeling a simple, "Catalog has many CatalogItems each of which is related to a Product and has a
	price." Note the following:

		i.   Catalog has a couple of custom validations to enforce reasonableness on a Catalog's publication and expiration dates.
		ii.  Product has a String field called "tags". As we'll see, these will be used by the Recommendation Engine to find other calendars
			 that we can "upsell" to the the customer while she's reviewing a particular calendar

	B. Open the conf/application.yml file. Note the following:

		i.   We're setting the port as 8091. We'll need to know this when we make an REST API call to get the product details. We will start
			 out with a known port number, but what's the disadvantage of doing so?
		ii.  The Grails application was created with grails.profile: rest-api. For microservices, this profile is preferred over the
			 default Grails web monolith profile - unless your microservice is a web app of course.
		iii. Notice the datasource. In this case. we're using a simple in-memory H2 database. The key microservice characteristic is, the
			 ProductCatalog microservice "owns" its own data. In general, this datasource should not be shared with other microservices.
			 This doesn't mean two ProductCatalog instances should each have their own datasource; they should.
		iv.  The application has a runtime name as specified by this entry:  spring.application.name: product-catalog


	C. Open the grails-app/init/productcatalog/Bootstrap.groovy script

		i.   In Bootstrap, we seed the database with some Products, CatalogItems and a Catalog
		ii.  For this workshop, we're not distingusihing between the Production, Test, and Development environments, but we would really
			 want to only seed this data for our Development and/or Test environments

	D. Open the grails-app/controllers/com.jackfrosch.msdemo.catalog.ProductController class and note the following:

		i.   ProductController extends RestfulController. RestfulController gives us basic RESTful endpoints for doing CRUD
		ii.  We added a "productDetails" action method. We could have overriden the show method which is semantically the same
		iii. Notice that productDetails handles requests for JSON or XML response content. I love it when Grails makes things so easy!


	E. Open the grails-app/controllers/productcatalog/UrlMappings.groovy file and note the following:

		i.   The Grails rest-api profile gives us some default CRUD endpoints
		ii.  We added a new one for /productDetails, but as noted, could have just as easily overriden the show method
		iii. We are leveraging a feature of Grails, where if the command object argument to the action method is a domain entity, and the id
		     is sent as a request parm, Grails will fetch the entity and pass the entity into the action

	F. Open the grails-app/services/com.jackfrosch.msdemo.catalog.ProductDetailsDecoratorService and note the following:

		i.   As the name says, this service will be used to decorate our Product details. In our case, we're just calling the
		     RecommendationEngine to get recommendations for a particular product id
		ii.  You might think this implies we're sharing Product database with the RecommendationEngine, but we're not as we'll see
		iii. If the Recommendation sends back a 500, we throw an exception. What if we can't connect to it at all; i.e. the service is down?
		     Let's just say our customer's shopping experience is going to end up giving us a 1-star rating!

	G. We'll run this little federation soon to see what it's doing, but first, let's review the RecommendationEngine

Lab 2: Review the RecommendationEngine

	A. Look at the Product domain class. What's a Product class doing in our Domain, didn't we already have a Product class in ProductCatalog?
	   We did, but that class is the Product as ProductCatalog needs to see it.

		i.   This Product shares some of the ProductCatalog data making it equivalent to the ProductCatalog's Product, but it's really a
	         different Product domain, the RecommendationEngine's Product.
		ii.  See how we share the id, the sku. This let's us correlate this Product with the ProductCatalog's product
		iii. We also have tags, but these are related to a dedicated Tag. The Tag represents a single ProductCatalog tag. This shows how
	         important a Tag is to the RecommendationEngine. A Tag could have all sorts of attributes that the RecommmendationEngine can
	         exploit to serve up the best recommendations

	B. Open the conf/application.yml file. Note the following:

		i.   The RecommendationEnginer has a fixed port of 8092. That port number is referenced explicitly by the ProductCatalog's
		     ProductDetailsDecoratorService
		ii.  Its datasource is independent of the ProductCatalog datasource - as we would expect

	C. Open the grails-app/init/productcatalog/Bootstrap.groovy script

		i.   We add some Products (of the RecommendationEngine varierty!) and associated Tags
		ii.  Notice we create a reusable Closure to help us create the Tag entities. You gotta love Groovy!

	D. Open the grails-app/controllers/com.jackfrosch.msdemo.catalog.RecommendationController class and note the following:

		i.   Notice, it is not a Restful controller. We could have just added the behavior on the ProductController, but did it this way
		     mostly to show that, "religious arguments" aside, not every behavior has to be a Restful behavior.
		ii.  Again, with the findRecommendation argument command object being the Product and the request parm being the id, Grails will
		     load the Product automatically.

Lab 3: Let's see this small federation is action

	A. Open a terminal (shell) window and start the ProductCatalog service

		i.   Change into the productCatalog project folder (where build.gradle is)
		ii.  From the IDE, you can launch the Gradle | Tasks | application | bootRun
		iii. From the command line, and run gradlew against the bootRun task; i.e. ./gradlew bootRun in *nix OS
		iv.  We want to see this is the shell: "Grails application running at http://localhost:8091 in environment: development"

	B. Open a terminal window and start the RecommendationEngine service

		i.   Of course, do it from the recommendationEngine folder
		ii.  We want to see this is the shell: "Grails application running at http://localhost:8092 in environment: development"

	C. Open a terminal window and issue the following commands (or use your favorite REST Client tool like Postman):

		i.   *nix OS: curl localhost:8091/productDetails/1
		ii.  Windows OS: You can just use Groovy for simple GETs: groovy -e "println 'http://localhost:8091/productDetails/1'.toURL().text"
		iii. The expected response is:

				{"product":{"id":1,"description":"Only cats in this playful 2017 calendar","msrp":14.99,
		         "name":"Here Kitty Kitty 2017 Calendar","sku":"S1231","tags":"cat,cats,kitten,kittens"},
		         "recommendedProducts":[{"id":2,"description":"Cats rule and dogs drool in this inter-species rivalry calendar",
		         "msrp":15.99,"name":"Raining Cats and Dogs 2017 Calendar","sku":"S1232","tags":"cat,cats,dog,dogs"}]}

		iv. Notice the recommendedProducts is included

	D. Repeat, but use this request: curl -H "Accept: text/xml" localhost:8091/productDetails/1

		i.   Windows users will need to use a RestClient to set the header
		ii.  The expected response is this:

	            <?xml version="1.0" encoding="UTF-8"?><map><entry key="product" id="1">
	            <description>Only cats in this playful 2017 calendar</description><msrp>14.99</msrp>
	            <name>Here Kitty Kitty 2017 Calendar</name><sku>S1231</sku><tags>cat,cats,kitten,kittens</tags></entry>
	            <entry key="recommendedProducts"><product id="2">
	            <description>Cats rule and dogs drool in this inter-species rivalry calendar</description><msrp>15.99</msrp>
	            <name>Raining Cats and Dogs 2017 Calendar</name><sku>S1232</sku><tags>cat,cats,dog,dogs</tags></product></entry></map>

Lab 4: Create a Eureka Discovery Service

	Netflix donated the Eureka project to open source. Eureka provides a scalable discovery service with
	load balanacing. Through a simple annotation, microservice instances can register themselves with
	Eureka when they start up. This way every microservice need not know the IP and port of all other instance
	collaborators.

	A. Review the eurekaServerSpringBoot project
		i. Note that it's a SpringBoot project, not a Grails project
		ii. Review its build.gradle file.
			a. Notice the Java and spring-boot plugins in use
			b. Note how we're using a mavenBOM to get a curated set of Spring Cloud dependency versions
			c. The spring-boot-starter-actuator dependency is common to Spring Boot apps
			d. The spring-cloud-starter-eureka-server dependency informs us what this service is about

	B. Review the application.yml in src/main/resources. We've hardcoded the port to be 8761, but if we wanted to run multiple instances,
	   we'd specify 0. Services register with Eureka through annotation, not with a direct API call. (Also notice that this app is itself
	   configured as a Eureka client. More on that later.)

	C. Open the com.jackfrosch.msdemo.EurekaServerApplication class. At this point, it's just a plain ol' SpringBoot application.

	D. We want to enable it to act as a EnableEurekaServer which keeps a service registry for us so every service need not know the IP
	   and port of every other. To do this, add the following annotation to the EurekaServerApplication class:

		@EnableEurekaServer

    E. A EurekaServer can also register itself with registries and learn its own IP and port. To enable this add the following annotation
       to the EurekaServerApplication class:

                @EnableDiscoveryClient

       (We won't be using that capability in this workshop.)


	F. Of course, we also want our ProductCatalog and RecommendationEngine to register themselves with the EurekaServer. This will
	   allow multiple instances to be load balanced and requests sent to their registered IPs and ports. Fortunately, it's trivial
	   to accomplish this. Add the following annotation to the Application classes in the grails-app/init folders in BOTH the
	   productCatalog and recommendationEngine projects:

		@EnableEurekaClient

	   (Did you remember to add it in both?)

	G. We need to make some config changes as well, so add the following config into the application.yml file for *both* the productCatalog
	   and RecommendationEngine projects below the spring.application.name config (maintain the 2-char indentation as below):

		   eureka:
	         client:
	           registryFetchIntervalSeconds: 5
	           serviceUrl:
	             defaultZone: http://eureka:admin@127.0.0.1:8761/eureka/
	         instance:
	           preferIpAddress: true
	           leaseRenewalIntervalInSeconds: 10
	           metadataMap:
	             instanceId: ${spring.application.name}:${spring.application.instance_id}:${random.int}

	H. Now, start the microservices (gradlew bootRun) in the following order

		i.   eurekaServerSpringBoot

			 a. Watch for Started EurekaServerApplication in 23.099 seconds
			 b. Open a browser and navigate to localhost:8761
			 c. Ignore this alarmist message:

			        EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT.
			        RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.

			 d. Notice the dashboard says, "No instances available" ubder "Instances currently registered with Eureka"

		ii.  Start ProductCatalog

			 a. Watch the console for it to start
			 b. Refresh the Eureka dashboard. You should see PRODUCT-CATALOG instance is registered with Eureka

		iii. Start RecommendationEngine

			 a. Watch the console for it to start
			 b. Refresh the Eureka dashboard. You should see RECOMMENDATION-ENGINE instance is registered with Eureka

	I. Nothing much has changed as you'll see if you run this: curl localhost:8091/productDetails/1

	J. Stop all the services

Lab 5: Create a Reverse Proxy API Gateway

	Well, Eureka is useful, but to leverage the service registration, we'd have to call Eureka' API, find the IP and port for a service, then
	make our calls to that. That would work, but would be tedious.

	Instead, we're going to leveral Zuul, a reverse-proxy service Netflix also donated. Now, all of our REST API calls within the federation,
	will and from without, will go through the Zuul server. Zuul will call Eureka and find out what the IP/port is for the service,

	Set up is super easy, so this will be a fast lab:

	A. Review the build.gradle dependencies for the ZuulProxySpringBoot project

	B. Review the application.yml file

		i.   It specifies the port as 8765. We'll leverage that soon.
		ii.  Pay careful attention to this configuration:

				zuul:
                  routes:
                    product-catalog: /product-catalog/**
                    recommendation-engine: /recommendation-engine/**

			 This says, "Any request coming in for any URI starting with /product-catalog will be sent to a product-catalog instance as
			 indicated by Eureka. Any request coming in for any URI starting with /recommendation-engine will be sent to a
			 recommendation-engine instance as indicated by Eureka."

	C. Open the zuulProxySpringBoot projects's ZuulServerApplication class

		i.   Add the @EnableZuulProxy annotation to the class to enable the app to work as a Zuul Proxy Server
        ii.  Add the @EnableDiscoveryClient annotation to the class so it will register with the Eureka server

    D. The ProductCatalog microservice hardcoded the IP/port for the RecommendationEngine in the ProductDetailsDecoratorService. Change
       that hardcoded reference

        from: "http://localhost:8092/findRecommendation/${product.id}"
        to: "http://localhost:8765/recommendation-engine/findRecommendation/${product.id}"

    E. In ProductCatalog and RecommendationEngine application.yml files, change the port to be 0. This will cause a randowm available port
       to be assigned

    F. Start the applications in this order:

        i.   Eureka Server
        ii.  Product Catalog
        iii. Recommendation Engine
        iv.  Zuul Server

		It's not that they have to be started in this order, but you'll see a bunch of stacktraces otherwise until all apps are started.

		NOTE: It can take up to 90 seconds for all of these collaborations to get services registered.

	G. Review Eureka by opening a browser and navigating to localhost:8761. Note that Zuul is now present.

	H. Test the microservice federation

		i.   Query for product details using this: curl localhost:8765/product-catalog/productDetails/1
		     (Notice we're querying through Zuul, not to the IP/port of ProductCatalog)

		ii.  Note: Sometimes Zuul is a little slow learning about its services defined in it routes. When you first query it, you may get a
		     500 error. Give it a 15 - 30 seconds and try again.


Lab 6: Add Monitoring and Circuit Breakers

	Wow! How far we have come. We started out with a couple of useful microservices that were hardcoded for IP and ports. We really couldn't
	scale them with multiple instances because of this. We added a Eureka server to register and load balance our services. We then added a
	Zuul server to map the canonical routes to our API endpoints so that our services, and public clients calling into our application,
	need only kow how to get to our Zuul server; i.e. via DNS.

	We have only one issue left for our workshop: How to guard against service failures cascading forward using Circuit Breakers. Also, how
	can we monitor the app to know when something is going/has gone wrong?

	For this, we'll leverage one more Netflix contribution, Hystrix. Again, it's super, super easy to set up. Let's get started:

	A. Review the HystrixDashboardSpringBootProject application.yml. Note its IP address is 7979. We'll use that to access a nice dashboard

	B. Review the build.gradle file dependencies needed

	C. Add the following annotations to the HystrixDashboardApplication class:

		@EnableHystrixDashboard
        @EnableDiscoveryClient

       The @EnableHystrixDashboard annotation gives us the capabilities for the dashboard, but we need to enable circuit breakers in our app.
       Our app needs a circuit breaker at the point the ProductCatalog ProductDetailsDecoratorService calls the RecommendationEngine service
       to get recommendations for a Product being examined for purchase.

	D. Open the productcatalog.Application class. Add this annotation to enable Hystrix circuit breakers in the application:

		@EnableHystrix

	E. Open the ProductCatalog ProductDetailsDecoratorService

		i.   Add this annotation to the findRecommendations method:

				@HystrixCommand(fallbackMethod = "defaultRecommendations")

			 This says, "If any exception happens in this findRecommendations method, fallback to the defaultRecommendations method."

		ii.  Add this as the defaultrecommendations method:

				List<Product> defaultRecommendations(Product product) {
                    Product.findAllByTagsIlike('%cat%')
                }

             This says we'll return Cat calendar products by default if the Recommendation Engine fails. I'm sure the Star Trek fans will
             appreciate getting Cat calendar recommendations!

    F. Test this as follows:

	    i. Start the services in this order:

	       a.   Eureka Server
	       b.  Product Catalog
	       b. Recommendation Engine
	       c.  Zuul Server
	       d.   Hystrix Dashboard service


	    ii. Open a new browser window

	        a.   Navigate to localhost:7979/hystrix

	        b.  In the field below the label "Hystrix Dashboard" enter: http://localhost:8765/hystrix.stream

	             Note that this port is for our Zuul server address

	        c. In the Title field, enter "Demo"

	        d.  Click on Montor Stream button

	    iii. Execute this request:

	            curl localhost:8765/product-catalog/productDetails/8

	       Notice, we're getting product id = 8, not 1 as before. You'll get this as data:

	       {"product":{"id":8,"description":"A full year's worth of iconic imagery from the original Star Trek series",
	          "msrp":15.99,"name":"Classic Trek 2017 Calendar","sku":"S1238",
	          "tags":"kirk,spock,mccoy,scotty,uhura,checkov,sulu,chapel,star trek"},
	          "recommendedProducts":[{"id":9,
	          "description":"For Next Generation fans, a great collection of iconic imagery from the Star Trek NG",
	          "msrp":16.99,"name":"NG Trek 2017 Calendar","sku":"S1239",
	          "tags":"data,frakes,picard,troi,crusher,worf,star trek,star trek ng"},
	          {"id":10,
	          "description":"Never forget Deep Space 9 with this collection of iconic imagery from the ground breaking series",
	          "msrp":11.99,"name":"Deep Space 9 2017 Calendar","sku":"S1210",
	          "tags":"sisko,odo,quark,worf,nerys,dax,o'brien,star trek,deep space 9"}]}

	    iv.  While monitoring the Hystrix Dashboard, execute several of the same requests in rapid succession. Watch the data change in
	         the dashboard

    G. Test the circuit breaker

        i.   Stop the recommendation engine

        ii.  Refresh the Eureka dashboard until the recommendation Engine service is gone

        iii. Execute the same request as before:   curl localhost:8765/product-catalog/productDetails/8

        iv. Notice you now get this result:

            {"product":{"id":8,"description":"A full year's worth of iconic imagery from the original Star Trek series",
            "msrp":15.99,"name":"Classic Trek 2017 Calendar","sku":"S1238",
            "tags":"kirk,spock,mccoy,scotty,uhura,checkov,sulu,chapel,star trek"},
            "recommendedProducts":[{"id":1,"description":"Only cats in this playful 2017 calendar","msrp":14.99,
            "name":"Here Kitty Kitty 2017 Calendar","sku":"S1231","tags":"cat,cats,kitten,kittens"},
            {"id":2,"description":"Cats rule and dogs drool in this inter-species rivalry calendar","msrp":15.99,
            "name":"Raining Cats and Dogs 2017 Calendar","sku":"S1232","tags":"cat,cats,dog,dogs"}]}

            Notice, we're now getting Cat calendar recommendations when the product we were looking at was a Star Trek calendar! While
            perhaps a lousy business practice, clearly our circuit breaker has tripped.

        v.  While monitoring the Hystrix Dashboard, execute several of the same requests in rapid succession. Watch the data change in
            the dashboard. Notice the Recommendation Engine is not processing any requests

    H. Restart the Recommendation Engine, watch for it to show up in Euereka and repeat the queries. The key thing to note here is, Hystrix
       doesn't immediately close the circuit. It's smart and knows a lot of times servers seems to come back to life but fall over almost
       immediately. So after a few queries that result in no exception, Hystrix closes the circuit breaker and starts sending requests to
       the recommendation engine again.


    That's all folks! Email me with questions or issues: jackfrosch@gmail.com

